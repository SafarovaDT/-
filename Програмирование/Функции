Функция - часть программы, блок кода, имеющий своё название. Большая программа может строиться из нескольких функций, каждая из которых выполняет
свою задачу, поэтому можно назвать функцию подпрограммой. Использование функций очень сильно упрощает написание и чтение кода, и в большинстве
случаев делает его оптимальным по объёму занимаемой памяти. Функция должна быть описана, и после этого может вызываться. Функция должна быть
описана снаружи других функций!

В общем виде функция имеет следующую структуру:
  тип_данных имя_функции (аргументы) {
  тело_функции
}

Где тип данных - это тип данных, который возвращает функция, имя функции - имя, по которому функция вызывается, набор аргументов (параметров) - необязательный набор переменных, и тело функции - код, который будет выполняться.

Вызов функции осуществляется именем функции и передачей набора аргументов, если таковые имеются:

имя_функции(аргумент1, аргумент 2, аргументN);
Если аргументы не передаются, в любом случае нужно указать пустые скобки!

имя_функции();
Функция в C++ всегда возвращает результат. Этот термин означает, что после выполнения функции она выдаёт некое значение, которое можно 
присвоить другой переменной.

результат = имя_функции();
Функция может принимать аргументы, может не принимать, может возвращать какое-то значение, может не возвращать. Давайте рассмотрим эти 
варианты.

Функция, которая ничего не принимает и ничего не возвращает
Самый простой для понимания вариант, с него и начнём. Помимо типов данных, которые я перечислял в уроке о типах данных, есть ещё один - void
который переводится с английского как "пустота". Создавая функцию типа void мы указываем компилятору, что никаких значений возвращаться не
будет (точнее будет - функция вернёт "ничего").

В некоторых языках программирования есть понятие "процедура" - это как раз и есть функция, которая ничего не принимает и не возвращает.
Но в C++ такого понятия нет, есть только функции.
Давайте напишем функцию, которая найдёт сумму двух чисел и присвоит её третьему числу. Так как функция у нас без аргументов и ничего не
возвращает, переменные придётся объявить заранее и сделать их глобальными, иначе функция не будет иметь к ним доступ и мы получим ошибку:

byte a, b;
int c;
void setup() {
  a = 10;
  b = 20;
  sumFunction();
  // после вызова функции
  // с имеет значение 30
}
void loop() {
}
void sumFunction() {
  c = a + b;
}


Это очень плохой пример с точки зрения оптимальности кода, но далее мы будем этот пример улучшать и в итоге получим конфетку.
Чем он плох на данном этапе: у нас используются глобальные переменные, которые работают внутри функции, а одним из главных принципов
программирования является разделение данных и действий. Будучи новичком, не стоит об этом сильно задумываться, позже вы сами к этому 
придёте. Разделяя данные и действия можно создавать универсальные инструменты, рассмотренная выше функция не является универсальной: 
она складывает глобальную а с глобальной b и записывает результат в глобальную же c. Сделаем следующий шаг к оптимизации: пусть функция
возвращает значение.

Функция, которая ничего не принимает и возвращает результат

Чтобы функция могла вернуть численное значение, она должна быть описана с типом данных, который будет возвращаться. Нужно заранее подумать, 
какой тип будет возвращён, чтобы избежать ошибок. Например я знаю, что моя суммирующая функция работает с типом данных byte, она складывает
два таких числа. Это означает, что результат вполне может превысить предел типа byte (сложили 100 и 200 и получили 300), значит функции
следовало бы возвращать например тип данных int. Собственно поэтому у переменной c из предыдущего примера тип данных int.

Для возврата значения нам понадобится оператор return, который и будет возвращать число. Здесь нужно запомнить, что return не просто
возвращает значение, а также завершает выполнение функции, то есть действия, указанные после return, выполнены уже не будут! На самом 
деле это очень удобно, ведь с помощью логических конструкций и операторов выбора можно предусмотреть в функции несколько разных return, 
которые будут возвращать разные значения или просто завершать выполнение функции.

Функция типа void вроде бы ничего не возвращает, но использование return; позволяет завершить выполнение функции по условию или как-то ещё. 
Это очень удобно!
Давайте перепишем наш код так, чтобы числа a и b складывались и результат возвращался функцией, и этот результат мы уже "ручками" приравняем
к c.

byte a, b;
int c;
void setup() {
  a = 10;
  b = 20;
  c = sumFunction();
  // с имеет значение 30
}
void loop() {
}
int sumFunction() {
  return (a + b);
}


Ну вот, функция стала чуть более универсальной. Теперь результат сложения a и b как функцию можно использовать в других местах и приравнивать
к другим переменным. Чтобы сделать код ещё более универсальным, давайте передавать величины для сложения в виде аргументов.

Функция, которая принимает аргументы и возвращает результат

Что касается аргументов, то они перечисляются в скобках через запятую с указанием типов данных. При вызове функции указанные аргументы
превращаются в локальные переменные, с которыми можно работать внутри функции. Иными словами - это копии переданных переменных! 
При вызове функции эти переменные получают значения, которые мы указываем при вызове. Смотрим:

byte a, b;
int c;
void setup() {
  a = 10;
  b = 20;
  c = sumFunction(a, b);
  // с имеет значение 30
}
void loop() {
}
int sumFunction(byte paramA, byte paramB) {
  return (paramA + paramB);
}


И вот так мы получили универсальную функцию sumFunction, которая принимает две величины типа byte, складывает их и возвращает результат типа
int. Это и есть выполнение концепции "отделение кода от данных", функция живёт сама по себе и не зависит от других переменных!
Казалось бы, можно использовать функцию как sumFunction(100, 200), и она вернёт значение 300. Но не всё так просто, потому что любое целое
число в программе обрабатывается компилятором как int, и при попытке передать такой вот int в нашу функцию, которая принимает byte,
мы получим ошибку "нельзя передать int вместо byte". В этом случае можно привести тип числа к byte вручную, вот так это будет выглядеть:

int c;
void setup() {
  c = sumFunction((byte)100, (byte)200);
  // с = 300
}
void loop() {
}
int sumFunction(byte paramA, byte paramB) {
  return (paramA + paramB);
}


Но лучше всё-таки сделать функцию более универсальной, пусть она принимает int paramA и int paramB, ведь данные переменные являются 
локальными, то есть создадутся при вызове функции и удалятся из памяти при завершении работы функции, и их "размер" в принципе не играет 
роли.

А как быть, если мы хотим складывать уже имеющийся функцией другие типы данных? Например, float. Можно преобразовать типы данных при 
передаче аргументов, но функция всё равно вернёт целое число. Сделать нашу функцию ещё более универсальной сможет такая штука C++ как 
перегруженная 
функция.

Перегруженные функции
Перегруженная функция это такая функция, которая определена несколько раз с одинаковым именем, но разным возвращаемым типом данных и/или 
разным набором аргументов.

int c;
float d;
void setup() {
  float af = 5.5;
  float bf = 0.25;
  Serial.begin(9600);
  c = sumFunction(10, 20);      // результат 30
  c = sumFunction(10, 20, 30);  // результат 60
  d = sumFunction(af, bf);      // результат 5.75
  Serial.println(c);
  Serial.println(d);
}
void loop() {
}
int sumFunction(int paramA, int paramB) {
  return (paramA + paramB);
}
int sumFunction(int paramA, int paramB, int paramC) {
  return (paramA + paramB + paramC);
}
float sumFunction(float paramA, float paramB) {
  return (paramA + paramB);
}
Итак, у нас теперь целых три функции с одинаковым именем, но разными наборами аргументов и типами возвращаемого значения. 
Программа сама разберётся какую из функций использовать на основе передаваемых аргументов. Передали два float - работает третья функция, 
вернёт float. Передали три int - получили их сумму при помощи второй по счёту функции. Передали два int - получили их сумму при помощи 
первой функции. Вот такая удобная штука! Ещё одним вариантом перегруженной функции является шаблонная функция, она позволяет работать с 
данными любого типа в рамках одной функции, без перегрузов. Читайте ниже.

                                                   Функция, которая меняет значение переменных

Забегая немного вперёд (в урок про указатели и ссылки) сразу рассмотрим ещё один полезный вариант: функция меняет значения указанных 
переменных. В рассмотренных выше примерах мы передавали в функцию переменные по значению. Это означает, что внутри тела функции мы имеем
дело с копиями переменных, которые не влияют на изначальные переменные. Если передать переменную по ссылке - внутри функции мы будем 
работать именно с теми переменными, которые передали в качестве аргументов! Для передачи аргумента по адресу достаточно добавить всего лишь
один символ - &. Напишем функцию, которая увеличивает значение переданной переменной на 10:

void setup() {
  int a = 10;
  incr(a);
  // здесь a == 20
}
void incr(int& var) {
  var += 10;
}
Таким образом мы снова отделили данные от выполняемого кода, но сделали это ещё более элегантно.


                                                                  Типы данных
Функция может возвращать и принимать как аргумент любые типы данных в любых сочетаниях: целые числа, float, String, указатели, struct, enum 
и так далее. Например следующая функция принимает два числа, склеивает их в строку через запятую и возвращает:

String toStr(int val1, float val2) {
  return (String)val1 + ", " + val2;  
}

При вызове Serial.println(toStr(10, 3.14)) увидим в мониторе порта 10, 3.14

                                                          Как вернуть несколько значений?
В языке C++, в отличие от того же Питона, нельзя просто так взять и вернуть из функции два значения. К слову, принять их тоже нельзя, такого
механизма в языке нет. Но есть структуры! Функция может принять структуру, вернуть структуру, а мы можем присвоить структуру.
Давайте сделаем функцию, которая принимает два числа, находит их сумму, разность и произведение и возвращает результат в виде структуры.

Для начала опишем структуру:

struct MyStruct {
  int valSum;
  int valSub;
  int valMul;
};
Она хранит сумму, разность и произведение. Теперь сделаем функцию, которая принимает два числа, считает, забивает результат в структуру и 
возвращает тип данных MyStruct

MyStruct compute(int val1, int val2) {
  MyStruct str;
  str.valSum = val1 + val2;
  str.valSub = val1 - val2;
  str.valMul = val1 * val2;
  return str;
}
Готово! Пользоваться этим можно так:

void setup() {
  Serial.begin(9600);
  MyStruct str;
  str = compute(3, 4);
  Serial.println(str.valSum);
  Serial.println(str.valSub);
  Serial.println(str.valMul);
}
Выведет в порт 7, -1, 12 Если изучить урок по структурам, то функцию с вычислением и возвратом структуры можно сократить всего до одной 
строчки кода:

MyStruct compute(int val1, int val2) {
  return (MyStruct) {val1 + val2, val1 - val2, val1 * val2};
}

                                                        Описание и реализация
Хорошим тоном считается объявлять функции отдельно от реализации. Что это значит: в начале документа, или в отдельном файле, мы описываем 
функцию (это будет называться прототип функции), а в другом месте пишем реализацию. Так делают в серьёзных программных проектах,
Ардуино-библиотеки - не исключение. Также такое написание позволяет слегка ускорить компиляцию кода, потому что компилятор уже знает, 
что он в нём найдёт. Алгоритм такой:

Описание (прототип) функции

тип_данных имя_функции(набор_аргументов);
Реализация функции

тип_данных имя_функции(набор_аргументов) {
  тело функции
}
То бишь всё то же самое, но с телом функции и фигурными скобками. Пример:

// описание функций
void lolkek(byte cheburek);
int getMemes();
void setup() {
}
void loop() {
}
// реализация функций
int getMemes() {
  // действия
}
void lolkek(byte cheburek) {
  // действия
}
Примечание: хоть компилятор и позволяет вызывать функцию до её объявления, иногда он может не найти функцию и выведет ошибку 
"функция не объявлена". В этом случае достаточно сделать прототип функции и расположить его поближе к началу документа, да и вообще
все используемые функции можно сделать в виде прототипов и вынести в начало кода вместе с глобальными переменными.

                                                    Передача массива в функцию (Pro)
Иногда бывает нужно передать в функцию массив (мы о них уже говорили), передать именно массив целиком, а не отдельный его элемент.
В этом случае уже не обойтись без указателей (урок про указатели). В следующем примере наша функция sumFunction будет суммировать 
элементы массива, который в неё передаётся. Функция заранее знает, сколько в массиве элементов, потому что я явно цифрой указал количество
в цикле for.

int c;
int myArray[] = {100, 30, 890, 645, 251};
void setup() {
  c = sumFunction(myArray);   // результат 1916
}
void loop() {
}
int sumFunction(int *intArray) {
  int sum = 0;   // переменная для сложения
  for (byte i = 0; i < 5; i++) {
    sum += intArray[i];
  }
  return sum;
}

Что из этого нужно запомнить: при описании функции аргумент массива указывается со звёздочкой, т.е. тип_данных* имя_массива.
При вызове массив передаётся как имя_массива . В целом всё. Давайте покажу как сделать универсальную функцию, которая суммирует массив 
любого размера. Для этого нам поможет оператор sizeof(), возвращающий размер в байтах. Этот размер нам нужно будет передать как аргумент
функции:

int c;
int myArray[] = {100, 30, 890, 645, 251, 645, 821, 325};
void setup() {
  // передаём сам массив и его размер в БАЙТАХ
  c = sumFunction(myArray, sizeof(myArray));
}
void loop() {
}
int sumFunction(int *intArray, int arrSize) {
  // переменная для суммирования
  int sum = 0;  
  // находим размер массива, разделив его вес
  // на вес одного элемента (тут у нас int)
  arrSize = arrSize / sizeof(int);  
  for (byte i = 0; i < arrSize; i++) {
    sum += intArray[i];
  }
  return sum;
}
И вот мы получили функцию, которая суммирует массив типа данных int любой длины и возвращает результат.


                                                          Другие типы функций (Pro)
                                                            Шаблонные функции
Шаблон - ещё один мощный инструмент языка C++, позволяющий создавать алгоритмы без привязки к типам данных. Тема очень обширная, мы 
рассмотрим её только применительно к "универсальным" функциям, полностью про шаблоны можно почитать тут, и тут продолжение.

Итак, шаблонные функции. В примере выше мы использовали перегруженные функции для создания функций с одинаковым именем, но разным типом
передаваемых аргументов. При помощи шаблонов можно сделать одну функцию, которая будет работать для любых типов данных! Компилятор сам 
выберет, какие типы данных подставить в функцию на этапе компиляции и создаст несколько перегруженных функций, если это нужно. Синтаксис
выглядит так:

template <параметры_шаблона> описание_функции
Описание функции можно раскрыть:

template <параметры_шаблона> тип_данных (аргументы) {
  тело_функции
}
Сделаем функцию, которая возвращает квадрат числа любого типа

// шаблонная функция
// принимает данные любого типа
// возвращает в этом же типе
template<typename T>
T squareVal(T val) {
  return val * val;
}
void setup() {
  byte a = 10;
  int b = 125;
  float c = 3.14;
  
  a = squareVal(a);
  b = squareVal(b);
  c = squareVal(c);
  // a == 100
  // b == 15625
  // c == 9.85
}
Можно передать в шаблон больше данных! Вот пример функции, которая перемножает два числа любого типа и возвращает результат:

template<typename T1, typename T2>
uint32_t mult(T1 val1, T2 val2) {
  return val1 * val2;
}
void setup() {
  byte a = 10;
  int b = 125;
  float c = 3.14;
  long val = mult(a, b);
  val = mult(a, c);
}
В некоторых ситуациях шаблоны могут быть очень удобны! Также при вызове шаблонной функции можно вручную передать тип данных:

mult<byte, float>(a, c);
Точно таким же образом будет работать изменение возвращаемого типа данных (см. первый пример, функция возвращает шаблонный тип). 
Можно переписать предыдущий пример функции, которая суммирует массив. Преимущество шаблонной версии в том, что передавать размер массива и
даже тип переменной не нужно, его можно посчитать внутри функции, вычислив размер через шаблон: 
длина массива (кол-во) = sizeof(T) / sizeof(someArray[0]), то есть размер всего массива в байтах делим на размер любого элемента.

int c;
int myArray[] = {100, 30, 890, 645, 251, 645, 821, 325};
void setup() {
  // передаём массив
  c = sumFunction(myArray);
}
template <typename T>
int sumFunction(T &someArray) {
  // переменная для суммирования
  long sum = 0;
  for (int i = 0; i < sizeof(T) / sizeof(someArray[0]); i++) {
    sum += someArray[i];
  }
  return sum;
}
void loop() {}
У - удобно!

                                                            Макро-функции
Вы наверное уже помните такую директиву препроцессора, как #define. Из урока про переменные и константы мы узнали, что при помощи дефайна 
можно задавать константы. Ключевая особенность работы #define заключается в том, что он заменяет последовательность символов чем угодно, 
что мы там напишем, и это даёт возможность создавать так называемые макро-функции (macro), которые не создаются как функции, а вставляются 
в код при компиляции. Например вот так будет выглядеть макро, складывающая два числа:

#define sum(x, y) ((x)+(y))
На этапе компиляции все встречающиеся sum(значение1, значение2) будут заменены на значение1 + значение2, таким образом это будет сумма.

#define sum(x, y) ((x)+(y))
void setup() {
  byte a = 10;
  byte b = 20;
  byte c = sum(a, b);
  // с получила значение 30
  // на этапе компиляции выражение sum(a, b)
  // превратилось в (a + b)
  int d = sum(500, 900);
  // d получила значение 1400
}
void loop() {
}
Зачем это нужно? Обычная функцию с именем, как разбиралось выше, имеет свой "адрес" в памяти, и при каждом вызове функции ядро обращается к
ней по этому адресу, что занимает какое-то время. Макро функция же "встраивается" в код программы и выполняется сразу.

В то же время если макро-функция вызывается в нескольких местах программы, она займёт больше места, чем отдельная обычная функция: все 
вызовы будут заменены на код и функция продублируется несколько раз. Делать макросы имеет смысл на простые функции (как в примере ниже),
на редко вызываемые функции, и в тех местах, где важно максимальное быстродействие. Например в вычислительных функциях.



В "языке" Arduino есть несколько готовых инструментов, которые кажутся функциями, но на самом деле являются макросами.
Заглянем в Arduino.h и увидим следующее:

#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define abs(x) ((x)>0?(x):-(x))
#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))
#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))
#define radians(deg) ((deg)*DEG_TO_RAD)
#define degrees(rad) ((rad)*RAD_TO_DEG)
#define sq(x) ((x)*(x))
Вот так вот, всем нам знакомые функции оказались макросами!

Ещё можно "переносить строку" для более комфортного создания макро-функций, перенос делается при помощи обратного слэша - \

#define printWords()        \
  Serial.print("Hello, ");  \
  Serial.print("World");    \
  Serial.println("!");
void setup() {
  Serial.begin(9600);
  printWords();
}
void loop() {}
Обратите внимание, на последней строке перенос не нужен! Таким образом, во время работы препроцессора все вызовы "функции" printWords() 
будут заменены на указанные строки кода. Можно и аргументы таким же образом передавать:

#define printWords(digit)     \
  Serial.print("Digit is ");  \
  Serial.print(digit);
void setup() {
  Serial.begin(9600);
  printWords(10); // выведет "Digit is 10"
}
void loop() {}

Важный момент: если объявить многострочную функцию как в примерах выше, то в конструкциях вида if (condition) func(); это приведёт к ошибке:
первая строка выполнится по условию, а остальные - в любом случае! Потому что макрос развернётся так, как он есть. 
Чтобы исправить эту ситуацию, для создания макро-функций часто используют вот такую конструкцию:

#define MACRO\
  do { \
    code... \
    code... \
  } while (0)
Такой макрос развернётся в корректный блок кода и будет работать во всех случаях.

Как вы можете видеть, объявлять большую макро-функцию не очень удобно, и тут на помощь приходят встроенные функции.

                                                        Встроенные функции (Pro)
Встроенная функция имеет тот же смысл, что и макро-функция: все вызовы функции в коде заменяются на код внутри функции, что ускоряет 
быстродействие, но занимает дополнительную Flash память при каждом новом вызове. В отличие от макро, которая заменяется препроцессором,
встроенная функция заменяется уже компилятором, т.е. после работы препроцессора, об этом нужно помнить и это можно использовать.

Объявляется встроенная функция очень просто: достаточно дописать ключевое слово inline перед объявлением функции. Компилятор может 
отказаться встраивать функцию (зависит от его настроек), поэтому можно попросить его принудительно встроить функцию при помощи 
атрибута __attribute__((always_inline)). Таким образом, для объявления встроенной функции нужно в самом начале написать
inline __attribute__((always_inline)). Рассмотрим функцию, которая просто увеличивает значение переменной:

inline __attribute__((always_inline))
int incr(int value) {
  return ++value;
}

Всё! Теперь вызовы incr будут заменены на код. Если нужно разделить описание и реализацию, то можно записать так:

// прототип
inline __attribute__((always_inline)) int incr(int value);
// реализация (будет встроенной)
int incr(int value) {
  return ++value;
}

                                                      Статические функции (Pro)
В уроке про переменные и типы данных мы обсуждали спецификатор static, который позволяет скрыть глобальную переменную от других файлов 
программы. С функцией спецификатор static делает то же самое - статическая функция скрыта от вызова из других файлов, т.е. её 
область определения - файл, в котором она находится. static void printHello();

                                                      Указатель на функцию (Pro)
Указатели - очень сложная тема, которая практически не пригодится новичку, но некоторые алгоритмы знать нужно (читай урок про указатели). 
Например передачу указателя на функцию, это полезно при создании своих функций в стиле ардуиновской attachInterrupt(), в которой мы
указываем свою функцию, которую сами создаём, а она вызывается в другом месте. Сделать это можно так:

void (*p_function)();   // указатель на p_function
void setup() {
  Serial.begin(9600);
  // прикрепляем функцию myFunction к *p_function
  attachFunction(myFunction);
  // вызываем p_function, которая у нас вызывает myFunction
  (*p_function)();
}
void loop() {
}
void attachFunction(void (*function)()) { // передача указателя на функцию
  p_function = *function;
}
void myFunction() {
  Serial.println("lolkek");
}
Функция, которая принимает любое кол-во аргументов (Pro)
Функция может принимать "переменное" количество аргументов, такие аргументы называются variadic arguments и передаются в функцию в 
виде многоточия .... Важное условие: у функции должен быть как минимум один обязательный аргумент:

void func(...) {}                 // нельзя
void func(int a, ...) {}          // можно
void func(int a, byte b, ...) {}  // можно
Чтобы работать с такими аргументами, существуют специальные встроенные функции. Важное замечание: программа должна "знать", сколько 
аргументов было передано в функцию. Это количество может быть известно заранее (задано константой) или передаваться первым аргументом:

void func(int num, ...) {}
Функция такого вида может принимать от одного до любого количества аргументов. Что делать с этими аргументами дальше? Давайте выведем их
в порт и из этого примера всё будет понятно:

void func(int num, ...) {
  va_list valist;                      // создание
  va_start(valist, num);               // инициализация
  for (int i = 0; i < num; i++) {
    Serial.print(va_arg(valist, int)); // доступ
    Serial.print(',');
  }
  va_end(valist);                      // очистка
  Serial.println();
}

Создаём список аргументов типа va_list список
Инициализируем его, передав последний обязательный аргумент перед многоточием: va_start(список, последний_аргумент)
Теперь можем получать значения по порядку, указав их тип: va_arg(список, тип_аргумента). Делать это нужно в цикле по количеству аргументов, 
чтобы вызвать только существующие аргументы!
В конце освобождаем список: va_end(список)






