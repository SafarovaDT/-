Каждая команда заканчивается точкой с запятой ;
Метод применяется к объекту через точку. Пример: Serial.begin();
Запятыми перечисляются аргументы функций и методов, члены массива, также через запятую можно выполнить несколько действий в одну строчку.Пример: digitalWrite(3, HIGH); массив - int myArray[] = {3, 4, 5 ,6};
Одиночный символ заключается в одиночные кавычки 'а'
Строка и массив символов заключается в двойные кавычки "строка"
Имена переменных могут содержать латинские буквы в верхнем и нижнем регистре (большие и маленькие), цифры и подчеркивание. Пример: myVal_35 .
Имена переменных не могут начинаться с цифры. Только с буквы или подчёркивания.
                                   Оформление
Форматирование (выравнивание) кода, то есть соблюдение пробелов и интервалов - код форматируется комбинацией клавиш Ctrl+T 
Между математическими действиями, знаками сравнения, присваивания и всем подобным ставится пробел.
Как и в обычном тексте, пробел ставится после и не ставится перед запятой, двоеточием, точкой с запятой.
Отступ от левого края экрана - знак табуляции, код сдвигается вправо и на одном расстоянии формируются команды из одного блока кода. В Arduino IDE одна табуляция равна двум пробелам. Можно использовать клавишу Tab.
Каждое действие выполняется с новой строки (автоформатирование это не исправляет).
Имена функций и переменных принято называть с маленькой буквы. Пример: value
Если имя состоит из двух и более слов, то их принято разделять. Есть два способа:
camelCase (верблюжий стиль): первая буква маленькая, каждая первая буква следующего слова - большая.
under_score (подчёркивание): все буквы маленькие, разделитель - подчёркивание. 
Имена типов данных и классов принято писать с большой буквы. Пример: Signal, Servo
Имена констант принято писать в верхнем регистре, разделение - подчеркивание. Пример: MOTOR_SPEED
При написании библиотек и классов, имена внутренних (приватных) переменных принято писать, начиная со знака подчёркивания. Пример: _position
                          Примеры названия переменных
~button - btn, кнопка
~index - idx - i, индекс
~buffer - buf, буфер
~value - val, значение
~variable - var, переменная
~pointer - ptr, указатель
                            Имена функций и методов
~get - получить значение (getValue)
~set - установить значение (setTime)
~print, show - показать что-то
~read - прочитать
~write - записать
~change - изменить
~clear - очистить
~begin, start - начать
~end, stop - закончить, остановить
                                Структура кода
Переменная любого типа должна вызываться только после своего объявления. Иначе будет ошибка
Объявление и использование классов или типов данных из библиотеки/файла должно быть после подключения библиотеки/файла
Функция может вызываться как до, так и после объявления, потому что C++ компилируемый язык, компиляция проходит в несколько этапов, и функции "выделяются" отдельно, поэтому могут вызываться в любом месте программы
Код в блоке setup() выполняется один раз при каждом запуске МК. Код в блоке loop() выполняется "по кругу" на всём протяжении работы программы, начиная с момента завершения выполнения setup()
