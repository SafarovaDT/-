                                            Синтаксис
Каждая команда заканчивается точкой с запятой ;
Метод применяется к объекту через точку. Пример: Serial.begin();
Запятыми перечисляются аргументы функций и методов, члены массива, также через запятую можно выполнить несколько действий в одну строчку.Пример: digitalWrite(3, HIGH); массив - int myArray[] = {3, 4, 5 ,6};
Одиночный символ заключается в одиночные кавычки 'а'
Строка и массив символов заключается в двойные кавычки "строка"
Имена переменных могут содержать латинские буквы в верхнем и нижнем регистре (большие и маленькие), цифры и подчеркивание. Пример: myVal_35 .
Имена переменных не могут начинаться с цифры. Только с буквы или подчёркивания.
                                          Оформление
Форматирование (выравнивание) кода, то есть соблюдение пробелов и интервалов - код форматируется комбинацией клавиш Ctrl+T 
Между математическими действиями, знаками сравнения, присваивания и всем подобным ставится пробел.
Как и в обычном тексте, пробел ставится после и не ставится перед запятой, двоеточием, точкой с запятой.
Отступ от левого края экрана - знак табуляции, код сдвигается вправо и на одном расстоянии формируются команды из одного блока кода. В Arduino IDE одна табуляция равна двум пробелам. Можно использовать клавишу Tab.
Каждое действие выполняется с новой строки (автоформатирование это не исправляет).
Имена функций и переменных принято называть с маленькой буквы. Пример: value
Если имя состоит из двух и более слов, то их принято разделять. Есть два способа:
camelCase (верблюжий стиль): первая буква маленькая, каждая первая буква следующего слова - большая.
under_score (подчёркивание): все буквы маленькие, разделитель - подчёркивание. 
Имена типов данных и классов принято писать с большой буквы. Пример: Signal, Servo
Имена констант принято писать в верхнем регистре, разделение - подчеркивание. Пример: MOTOR_SPEED
При написании библиотек и классов, имена внутренних (приватных) переменных принято писать, начиная со знака подчёркивания. Пример: _position
                          Примеры названия переменных
~button - btn, кнопка
~index - idx - i, индекс
~buffer - buf, буфер
~value - val, значение
~variable - var, переменная
~pointer - ptr, указатель
                                        Имена функций и методов
~get - получить значение (getValue)
~set - установить значение (setTime)
~print, show - показать что-то
~read - прочитать
~write - записать
~change - изменить
~clear - очистить
~begin, start - начать
~end, stop - закончить, остановить
                                            Структура кода
Переменная любого типа должна вызываться только после своего объявления. Иначе будет ошибка
Объявление и использование классов или типов данных из библиотеки/файла должно быть после подключения библиотеки/файла
Функция может вызываться как до, так и после объявления, потому что C++ компилируемый язык, компиляция проходит в несколько этапов, и функции "выделяются" отдельно, поэтому могут вызываться в любом месте программы
Код в блоке setup() выполняется один раз при каждом запуске МК. Код в блоке loop() выполняется "по кругу" на всём протяжении работы программы, начиная с момента завершения выполнения setup()
                                       Подключение библиотек и файлов
Библиотеки или просто внешние файлы,подключаются в главный файл (файлу прошивки) при помощи директивы #include.
Данная команда сообщает компилятору, что нужно найти и добавить в программу указанный файл.
Этот файл может содержать свои #include и тянуть за собой и другие файлы, таким образом программа может быть разбита на множество независимых файлов
#include <Servo.h> // подключает библиотеку Servo.h

#include “Servo.h” // тоже подключает библиотеку Servo.h

                                             ОТЛИЧИЕ <> и ""
Когда указываем название "в кавычках", компилятор сначала ищет файл в папке со скетчем, а затем в папке с библиотеками. 
При использовании <галочек> компилятор ищет файл только в папке с библиотеками! 
К слову о папках с библиотеками: их две, в обеих будет производиться поиск библиотек.
                                             Не используйте мышку!
Ctrl+← , Ctrl+→ – переместить курсор влево/вправо НА ОДНО СЛОВО
Home , End – переместить курсор в начало/конец строки
Shift+← , Shift+→ – выделить символ слева/справа от курсора
Shift+Ctrl+← , Shift+Ctrl+→ – выделить слово слева/справа от курсора
Shift+Home , Shift+End – выделить все символы от текущего положения курсора до начала/конца строки
Ctrl+Z – отменить последнее действие
Ctrl+Y – повторить отменённое действие
Ctrl+C – копировать выделенный текст
Ctrl+X – вырезать выделенный текст
Ctrl+V – вставить текст из буфера обмена
Ctrl+U – загрузить прошивку в Arduino
Ctrl+R – скомпилировать (проверить)
Ctrl+Shift+M – открыть монитор порта
Ctrl+T - автоформатирование
Для ОТОДВИГАНИЯ КОММЕНТАРИЕВ в правую часть кода используйте TAB, а не ПРОБЕЛ. 
Нажатие TAB перемещает курсор по некоторой таблице, из-за чего ваши комментарии будут установлены на одинаковом расстоянии
